@using WebSchool.ViewModels.Assignment
@model CreateAssignmentInputModel 

@{ 
    Layout = "_Layout";
    ViewData["Title"] = "Create assignment";
}

<main class="container col-md-6 offset-md-3">
    <h1>Create assignment</h1>
    <div asp-validation-summary="All" class="text-danger"></div>

    <form asp-controller="Assignments" asp-action="Create" method="post">
        <div class="mb-3">
            <label asp-for="Title" class="form-label"></label>
            <input asp-for="Title" class="form-control" placeholder="Assignment title" />
        </div>

        <div class="mb-3">
            <label asp-for="Points" class="form-label"></label>
            <input asp-for="Points" class="form-control" placeholder="Assignment points" />
        </div>

        <hr />

        <section id="questionsSection">
        </section>

        <button onclick="addNewQuestion()" type="button" class="btn btn-primary">Add question</button>

        <button class="btn btn-primary" onclick="createAssignment(event)">Create assignment</button>
    </form>
</main>

<style>
    hr {
        border: 2px solid black;
    }
</style>

@section Scripts {
    <script>
        const questionsSection = document.getElementById('questionsSection');
        const questions = [];

        const addNewQuestion = () => {
            const question = createQuestionHeaders();
            addAnswerField(question);
        }

        const createQuestionHeaders = () => {
            const questionContainer = document.createElement('div');
            questionContainer.classList.add('mb-3');

            // Question number label
            const questionNumber = document.createElement('label');
            questionNumber.classList.add('form-label', 'd-block');
            questionNumber.textContent = `#${questions.length} Question`;
            questionContainer.appendChild(questionNumber);

            // question title container
            const questionTitleContainer = document.createElement('div');
            questionTitleContainer.classList.add('mb-3');
            questionContainer.appendChild(questionTitleContainer);

            // multiple questions label
            const multipleQuestionsLabel = document.createElement('label');
            multipleQuestionsLabel.textContent = 'Multiple questions:';
            questionTitleContainer.appendChild(multipleQuestionsLabel);

            // mulitple questions checkbox
            const multipleQuestionsInput = document.createElement('input');
            multipleQuestionsInput.type = 'checkbox';
            multipleQuestionsInput.value = 'false';
            multipleQuestionsInput.name = `Questions[${questions.length}].HasMultipleAnswers`;
            multipleQuestionsInput.classList.add('form-check-input', 'ms-2');
            questionTitleContainer.appendChild(multipleQuestionsInput);

            // question textarea
            const questionTextarea = document.createElement('textarea');
            questionTextarea.classList.add('form-control', 'mb-3', 'question-textarea');
            questionTextarea.placeholder = 'Question goes here';
            questionTextarea.name = `Questions[${questions.length}].Question`;
            questionContainer.appendChild(questionTextarea);

            // answers section
            const answersSection = document.createElement('section');
            questionContainer.appendChild(answersSection);

            const question = {
                element: questionContainer,
                answersSection,
                answers: 0,
                index: questions.length
            };

            // add new answer button
            const newAnswerButton = document.createElement('button');
            newAnswerButton.textContent = 'Add answer';
            newAnswerButton.classList.add('btn', 'btn-primary');
            newAnswerButton.type = 'button';
            newAnswerButton.addEventListener('click', () => addAnswerField(question));
            questionContainer.appendChild(newAnswerButton);

            const horizontalLine = document.createElement('hr');
            questionContainer.appendChild(horizontalLine);

            questions.push(question);
            questionsSection.appendChild(questionContainer);
            return question;
        }

        const addAnswerField = (question) => {
            const answersContainer = document.createElement('div');
            answersContainer.classList.add('mb-3');

            const answerRadioButton = document.createElement('input');
            answerRadioButton.classList.add('form-check-input', 'align-baseline', 'me-2');
            answerRadioButton.type = 'radio';
            answerRadioButton.name = `answer-${question.index}`;
            answersContainer.appendChild(answerRadioButton);

            const answerInputField = document.createElement('input');
            answerInputField.classList.add('form-control', 'd-inline-block', 'w-75');
            answerInputField.placeholder = 'Answer';
            answerInputField.name = `Questions[${question.index}].Answers[${question.answers}].Content`;
            answersContainer.appendChild(answerInputField);

            const deleteButton = document.createElement('button');
            deleteButton.type = 'button';
            deleteButton.classList.add('btn', 'btn-danger', 'ms-2');
            deleteButton.style.marginTop = '-5px';
            deleteButton.innerHTML = '<i class="fa fa-trash-alt"></i>';
            answersContainer.appendChild(deleteButton);

            question.answers++;
            question.answersSection.appendChild(answersContainer);
        }

        const createAssignment = (event) => {
            let questionIndex = 0;
            for (const question of questions) {
                const questionTextarea = question.element.querySelector('#questionsSection > div > textarea');
                questionTextarea.name = `Questions[${questionIndex}].Question`;

                const multipleAnswersInput = question.element.querySelector('#questionsSection > div > div > input');
                multipleAnswersInput.name = `Questions[${questionIndex}].HasMultipleAnswers`;
                multipleAnswersInput.value = multipleAnswersInput.checked;

                let answerIndex = 0;
                const answers = Array.from(question.answersSection.children);
                for (const answer of answers) {
                    const valueButton = answer.children[0];
                    valueButton.name = `Questions[${questionIndex}].Answers[${answerIndex}].IsCorrect`;
                    valueButton.value = valueButton.checked;

                    const answerInput = answer.children[1];
                    answerInput.name = `Questions[${questionIndex}].Answers[${answerIndex}].Content`;
                    answerIndex++;
                }

                questionIndex++;
            }
        }
    </script>
}